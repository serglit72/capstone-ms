version: 2.1

jobs:
  build-env:
    docker:
      - image: cimg/base:2022.06
        auth:
          username: $DOCKERHUB_LOGIN
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
   
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "Install Python"
          command: | 
            sudo apt update
            sudo apt install python3
            sudo apt install python3-pip
            sudo apt install python3-venv curl wget
            make install
            pip freeze > requirements.txt
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/project
          # Must be relative path from root
          paths:
            - ./
      - save_cache:
          key: v1-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - ~/project

  test-build:
    docker:
      - image: cimg/base:2022.06
    steps:
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      #fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "lint and pytest: index page and status page"
          command: |
            ls -la
            wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
            chmod +x hadolint
            . capstone/venv/bin/activate
            which python3
            # make lint
            make test
  
  docker-build-push:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
      # fallback to using the latest cache if no exact match is found
            - v1-dependencies-     
      - setup_remote_docker: 
          docker_layer_caching: true
      - run: 
          name: "Build and push Docker image to Dockerhub"
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_LOGIN --password-stdin
            docker build -t serglit72/flask-app:latest . && docker images
            docker push serglit72/flask-app:latest
      
              
      # - run: 
      #     name: "Creating virtual enviromment" 
      #     command: |
      #       pwd && ls -la
      #       python3 -m venv .capstone
      #       source .capstone/bin/activate 
      #       docker --version > my_test_file.txt
             
      # - run:
      #     name: "Download hadolint"
      #     command: |
      #       pip install --upgrade pip
      #       pip install -r requirements.txt
      #       # This is linter for Dockerfiles
      #       wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
      #       chmod +x hadolint && ./hadolint Dockerfile
            
      # - run: 
      #     name: "Test Python scripts using lints"
      #     command: |
      #       ./pylint --disable=R,C,W1203,W1202 app.py 
### This is a linter for Python source code linter: https://www.pylint.org/
### This should be run from inside a virtualenv
      # - run:
      #     name: "Add GPG key for the official Docker repo to the Ubuntu system"
      #     command: |
      #       curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  
      #       sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
      
      # - run:
      #     name: "Docker building an image"
      #     command: |
      #       sudo docker build -t flask-app .
      #       ./upload_to_dockerhub.sh         


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  capstone-ms:
    jobs:
      - build-env
      - test-build:
          requires:
            - build-env
      - docker-build-push:
          requires: 
            - test-build
